{"version":3,"sources":["API.js","Buttons.js","ImageContainer.js","App.js","index.js"],"names":["fetchImages","query","a","queryURL","fetch","response","json","ok","message","map","image","index","url","loaded","error","Error","Buttons","setImages","images","getImages","count","fetchedImages","removeImages","number","newImages","slice","id","onClick","ImageContainer","imageStyle","display","src","style","className","onLoad","allImages","updateImageLoaded","alt","App","useState","length","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAeeA,G,KAfE,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACZC,EADY,kDAC0CF,GAD1C,SAEKG,MAAMD,GAFX,cAEZE,EAFY,gBAGDA,EAASC,OAHR,UAGdA,EAHc,QAKdD,EAASE,GALK,yCAMTD,EAAKE,QAAQC,KAAI,SAACC,EAAOC,GAC9B,MAAO,CAAEC,IAAKF,EAAOG,QAAQ,OAPf,aAUZC,EAAQ,IAAIC,MAAMT,EAAKE,UACvBH,SAAWC,EACXQ,EAZY,4CAAH,uD,OCwBFE,EArBC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACtBC,EAAS,uCAAG,WAAOC,GAAP,eAAAlB,EAAA,sEACYF,EAAYoB,GADxB,OACVC,EADU,OAEhBJ,EAAU,GAAD,mBAAKC,GAAL,YAAgBG,KAFT,2CAAH,sDAKTC,EAAe,SAACC,GACpB,IAAMC,EAAYN,EAAOO,MAAM,EAAGF,GAClCN,EAAUO,IAGZ,OACE,sBAAKE,GAAG,mBAAR,UACE,wBAAQC,QAAS,kBAAMR,EAAU,IAAjC,gBACA,wBAAQQ,QAAS,kBAAMR,EAAU,IAAjC,gBACA,wBAAQQ,QAAS,kBAAML,GAAc,IAArC,gBACA,wBAAQK,QAAS,kBAAML,GAAc,IAArC,oBCKSM,EAtBQ,SAAC,GAAyC,IAAvClB,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,MAAOO,EAAwB,EAAxBA,OAAQD,EAAgB,EAAhBA,UACxCY,EAAanB,EAAMG,OAAS,GAAK,CAAEiB,QAAS,QAOlD,OACE,sCACIpB,EAAMG,QAAU,oBAAIa,GAAG,UAAP,wBAClB,qBACEK,IAAKrB,EAAME,IACXoB,MAAOH,EACPI,UAAU,QACVC,OAAQ,kBAbY,SAACvB,GACzB,IAAMwB,EAAS,YAAOjB,GACtBA,EAAOP,GAAOE,QAAS,EACvBI,EAAUkB,GAUQC,CAAkBzB,IAChC0B,IAAI,cCQGC,EArBH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTrB,EADS,KACDD,EADC,KAGhB,OACE,sBAAKgB,UAAU,MAAf,UACE,6CAAgBf,EAAOsB,UACvB,cAAC,EAAD,CAASvB,UAAWA,EAAWC,OAAQA,IACtCA,GACCA,EAAOT,KAAI,SAACC,EAAOC,GAAR,OACT,cAAC,EAAD,CACED,MAAOA,EACPC,MAAOA,EACPO,OAAQA,EACRD,UAAWA,GAJb,UAKUP,EAAME,KALhB,OAKsBD,WCdhC8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.75276e08.chunk.js","sourcesContent":["const fetchImages = async (query) => {\n  const queryURL = `https://dog.ceo/api/breeds/image/random/${query}`;\n  const response = await fetch(queryURL);\n  let json = await response.json();\n\n  if (response.ok) {\n    return json.message.map((image, index) => {\n      return { url: image, loaded: false };\n    });\n  }\n  const error = new Error(json.message);\n  error.response = json;\n  throw error;\n};\n\nexport default fetchImages;\n","import \"./App.css\";\nimport fetchImages from \"./API\";\n\nconst Buttons = ({ setImages, images }) => {\n  const getImages = async (count) => {\n    const fetchedImages = await fetchImages(count);\n    setImages([...images, ...fetchedImages]);\n  };\n\n  const removeImages = (number) => {\n    const newImages = images.slice(0, number);\n    setImages(newImages);\n  };\n\n  return (\n    <div id=\"button-container\">\n      <button onClick={() => getImages(1)}>+1</button>\n      <button onClick={() => getImages(5)}>+5</button>\n      <button onClick={() => removeImages(-1)}>-1</button>\n      <button onClick={() => removeImages(-5)}>-5</button>\n    </div>\n  );\n};\n\nexport default Buttons;\n","import \"./App.css\";\n\nconst ImageContainer = ({ image, index, images, setImages }) => {\n  const imageStyle = image.loaded ? {} : { display: \"none\" };\n  const updateImageLoaded = (index) => {\n    const allImages = [...images];\n    images[index].loaded = true;\n    setImages(allImages);\n  };\n\n  return (\n    <>\n      {!image.loaded && <h4 id=\"loading\">loading...</h4>}\n      <img\n        src={image.url}\n        style={imageStyle}\n        className=\"image\"\n        onLoad={() => updateImageLoaded(index)}\n        alt=\"a dog\"\n      />\n    </>\n  );\n};\n\nexport default ImageContainer;\n","import React, { useState } from \"react\";\nimport Buttons from \"./Buttons\";\nimport ImageContainer from \"./ImageContainer\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n\n  return (\n    <div className=\"App\">\n      <h4>Dog count: {images.length}</h4>\n      <Buttons setImages={setImages} images={images} />\n      {images &&\n        images.map((image, index) => (\n          <ImageContainer\n            image={image}\n            index={index}\n            images={images}\n            setImages={setImages}\n            key={`${image.url}${index}`}\n          />\n        ))}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}